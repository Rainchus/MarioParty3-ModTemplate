import os
import ninja_syntax
import glob
import subprocess

#Files compiled and automatically DMAed to expansion pak ram on boot
c_files = glob.glob('src/**/*.c', recursive=True)

# .s files are put into expansion pak ram and are *not* intended to have their headersize changed
s_files = glob.glob('asm/**/*.s', recursive=True)

# .asm files are assembly files that often change the headersize
asm_files = glob.glob('asm/**/*.asm', recursive=True)

def create_main_asm():
    header = f"""
// Automatically generated by configure.py, do not edit
.n64
.open "rom/{baseromName}", "rom/{romModName}", 0
"""

    footer = """
.align 8
PAYLOAD_END_RAM:
.close
"""
    with open("asm/main.asm", 'w') as file:
        file.write(header)

        for asm_file in asm_files:
            if asm_file.endswith('main.asm'):
                continue
            file.write(f".include \"{asm_file}\"\n")

        for s_file in s_files:
            file.write(f".include \"{s_file}\"\n")

        for c_file in c_files:
            obj_file = os.path.join('obj', os.path.relpath(c_file, 'src')).replace('.c', '.o')
            file.write(f".importobj \"{obj_file}\"\n")

        file.write(footer)

def create_ninja_file(romModName, baseromName):
    c_flags = "-O2 -Wall -Wno-missing-braces -mtune=vr4300 -march=vr4300 -mabi=32 -fomit-frame-pointer -mno-abicalls -fno-pic -G0 -fno-inline -DF3DEX_GBI_2 -DDebug"
    with open('build.ninja', 'w') as buildfile:
        ninja = ninja_syntax.Writer(buildfile)
        ninja.variable('CC', 'mips64-elf-gcc')
        ninja.variable('CFLAGS', c_flags)
        ninja.variable('INCLUDE_FLAGS', '-Iinclude -Isrc')

        ninja.rule(
            "cc",
            command="$CC $CFLAGS $INCLUDE_FLAGS -c $in -o $out",
            description="Compiling $in to $out",
            depfile="$out.d",
            deps="gcc",
        )

        obj_files = []
        for c_file in c_files:
            obj_file = os.path.join('obj', os.path.relpath(c_file, 'src')).replace('.c', '.o')
            ninja.build(obj_file, 'cc', c_file)
            obj_files.append(obj_file)

        ninja.build('all', 'phony', obj_files)

        ninja.rule(
            "armips",
            command="armips asm/main.asm -sym syms.txt",
            description="Running armips on main.asm"
        )
        ninja.build('run_armips', 'armips', 'all')

        ninja.rule(
            "n64crc",
            command=f"tools/n64crc.exe rom/{romModName}",
            description=f"Calculating CRC for {romModName}"
        )

        ninja.build('run_n64crc', 'n64crc', 'run_armips')

if __name__ == "__main__":
    baseromName = "mp3-mainFS-repack.z64"
    romModName = "mp3-mod.z64"
    create_ninja_file(romModName, baseromName)
    create_main_asm()